generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Users {
    id          String            @id @default(cuid())
    name        String
    email       String            @unique
    password    String
    lastLogin   DateTime          @default(now())
    createdAt   DateTime          @default(now()) @map("created_at")
    updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at")
    permissions UserPermissions[]

    @@map("users")
}

model Permissions {
    name            String            @id @unique
    createdAt       DateTime          @default(now()) @map("created_at")
    updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
    UserPermissions UserPermissions[]

    @@map("permissions")
}

model UserPermissions {
    id             String      @id @default(cuid())
    userId         String      @map("user_id")
    permissionName String      @map("permission_name")
    createdAt      DateTime    @default(now()) @map("created_at")
    updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at")
    user           Users       @relation(fields: [userId], references: [id])
    permission     Permissions @relation(fields: [permissionName], references: [name])

    @@unique([userId, permissionName])
    @@map("user_permissions")
}

model Media {
    id         String       @id @default(cuid())
    url        String
    type       String       @default("image")
    alt        String
    title      String
    cta        String?
    createdAt  DateTime     @default(now()) @map("created_at")
    updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")
    Blog       Blog[]
    CoverImage CoverImage[]

    @@map("media")
}

model BlogTags {
    id         String       @id @default(cuid())
    name       String
    slug       String       @unique
    active     Boolean      @default(true)
    createdAt  DateTime     @default(now()) @map("created_at")
    updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")
    blogToTags TagsToBlog[]

    @@map("blog_tags")
}

model Blog {
    id                 String       @id @default(cuid()) @map("blog_id")
    title              String
    synopsis           String
    bannerId           String       @map("banner_id")
    banner             Media        @relation(fields: [bannerId], references: [id])
    authorName         String
    readingTimeSeconds Int
    slug               String       @unique
    published          Boolean      @default(false)
    publishedAt        DateTime     @map("published_at")
    contentJson        Json         @map("content_json")
    createdAt          DateTime     @default(now()) @map("created_at")
    updatedAt          DateTime     @default(now()) @updatedAt @map("updated_at")
    blogToTags         TagsToBlog[]

    @@index([slug])
    @@map("blogs")
}

model TagsToBlog {
    id        String   @id @default(cuid())
    blogId    String   @map("blog_id")
    blog      Blog     @relation(fields: [blogId], references: [id])
    tagId     String   @map("tag_id")
    tag       BlogTags @relation(fields: [tagId], references: [id])
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    @@unique([blogId, tagId])
    @@map("tags_to_blog")
}

model StaticPage {
    id         String       @id @default(cuid())
    title      String
    slug       String       @unique
    createdAt  DateTime     @default(now()) @map("created_at")
    updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")
    CoverImage CoverImage[]

    @@map("static_pages")
}

model CoverImage {
    id        String     @id @default(cuid())
    mediaId   String     @map("media_id")
    media     Media      @relation(fields: [mediaId], references: [id])
    pageId    String     @map("page_id")
    page      StaticPage @relation(fields: [pageId], references: [id])
    createdAt DateTime   @default(now()) @map("created_at")
    updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

    @@map("cover_images")
}

model VideoTag {
    id          String        @id @default(cuid())
    name        String
    slug        String        @unique
    active      Boolean       @default(true)
    createdAt   DateTime      @default(now()) @map("created_at")
    updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
    videoToTags TagsToVideo[]

    @@map("video_tag")
}

model TagsToVideo {
    id          String       @id @default(cuid())
    videoTag    VideoTag?    @relation(fields: [videoTagsId], references: [id])
    videoTagsId String?      @map("video_tags_id")
    videoId     String       @map("video_id")
    video       YoutubeVideo @relation(fields: [videoId], references: [id])

    @@map("tags_to_video")
}

model YoutubeVideo {
    id             String           @id @default(cuid())
    url            String
    name           String
    createdAt      DateTime         @default(now()) @map("created_at")
    updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
    playlistVideos PlaylistVideos[]
    tagsToVideo    TagsToVideo[]

    @@map("youtube_videos")
}

model Playlist {
    id             String           @id @default(cuid())
    name           String
    slug           String           @unique
    description    String
    createdAt      DateTime         @default(now()) @map("created_at")
    updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
    playlistVideos PlaylistVideos[]

    @@map("playlists")
}

model PlaylistVideos {
    id         String       @id @default(cuid())
    playlistId String       @map("playlist_id")
    playlist   Playlist     @relation(fields: [playlistId], references: [id])
    videoId    String       @map("video_id")
    video      YoutubeVideo @relation(fields: [videoId], references: [id])
    createdAt  DateTime     @default(now()) @map("created_at")
    updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")

    @@unique([playlistId, videoId])
    @@map("playlist_videos")
}
